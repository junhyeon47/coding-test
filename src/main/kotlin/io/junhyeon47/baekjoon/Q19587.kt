package io.junhyeon47.baekjoon

import java.util.*

/**
 * 객실 배치
 * https://www.acmicpc.net/problem/19587
 */
fun main() = with(Scanner(System.`in`)) {
    // 잘못된 풀이
    // 각 호실은 자연수 번호를 가지고 있으며, 100으로 나눈 몫은 층수를 나타내고, 나머지는 1 또는 2이다.
    // 한 층에 있는 두 방은 나머지가 서로 다르다. 나머지가 같으면서 몫이 1 차이 나는 두 방은 위아래로 인접하게 배치되어 있다.
    // 예를 들어 1층에는 101호실과 102호실, 2층에는 201호실과 202호실이 존재한다.
    // 성민이가 운영하는 호텔의 층수인 정수 N이 입력으로 주어진다. (1 ≤ N ≤ 10^18)
    // 1 층일 때(3): 101, 102, x
    // - 0명(1)
    // - 1명(2): 101, 102
    // 2 층일 때(3+4): 101, 102, x, 201, 202, 101 202, 102 201
    // - 1명(2): 201, 202
    // - 2명(2): 101 202, 102 201
    // 3 층일 때(3+4+10): 101, 102, x, 201, 202, 101 202, 102 201
    // - 1명(2): 301, 302
    // - 2명(6): 101 301, 101 302, 102 301, 102 302, 201 302, 202 301
    // - 3명(2): 101 202 301, 102 201 302
    // 4 층일 때(3+4+10+24): 101, 102, x, 201, 202, 101 202, 102 201, 301, 302, 201 302, 202 301, 101 301, 101 302, 102 301, 102 302, 101 202 301, 102 201 302
    // - 1명(2): 401, 402
    // - 2명(10): 101 401, 101 402, 102 401, 102 402, 201 401, 201 402, 202 401, 202 402, 301 402, 302 401
    // - 3명(10): 101 202 401, 101 202 402, 102 201 401, 102 201 402, 201 302 401, 202 301 402, 101 301 402, 101 302 401, 102 301 402, 102 302 401
    // - 4명(2): 101 202 301 402, 102 201 302 401
    // dp[0] = 1
    // N=1, dp[1] = 3
    // N=2, dp[2] = 2 * dp[1] + dp[0] = 7
    // N=3, dp[3] = 2 * dp[2] + dp[1] = 17
    // N=4, dp[4] = 2 * dp[3] + dp[2] = 41
    // N=5, dp[5] = 2 * dp[4] + dp[3] = 99
    // 점화식: dp[n] = 2 * dp[n-1] + dp[n-2]
    val n = nextLong();
    println(calculate(n))
}

fun calculate(floor: Long): Long? {
    val mod = 1000000007
    val dp = HashMap<Long, Long>();

    dp[0] = 1
    dp[1] = 3
    dp[2] = 7

    if (floor <= 2) {
        return dp[floor]
    }

    for (current in 3..floor) {
        dp[current] = 2 * dp.getOrDefault(current - 1, 0L) % mod + dp.getOrDefault(current - 2, 0L) % mod
    }

    return dp[floor]
}